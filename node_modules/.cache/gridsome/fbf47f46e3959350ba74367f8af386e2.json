{"remainingRequest":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/gridsome-plugin-flexsearch/gridsome.client.js","dependencies":[{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/gridsome-plugin-flexsearch/gridsome.client.js","mtime":1617803158680},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/cache-loader/dist/cjs.js","mtime":1617803144827},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/babel-loader/lib/index.js","mtime":1617803144756}],"contextDependencies":[],"result":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.object.from-entries\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.includes\";\nimport _typeof from \"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport FlexSearch from 'flexsearch';\nimport cjson from 'compressed-json';\nimport pMap from 'p-map';\nexport default function (_x, _x2, _x3) {\n  return _ref2.apply(this, arguments);\n}\n\nfunction _ref2() {\n  _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(Vue, options, _ref) {\n    var isClient, router, flexsearch, _options$chunk, chunk, _options$compress, compress, _options$autoFetch, autoFetch, _options$autoSetup, autoSetup, searchFields, pathPrefix, siteUrl, basePath, loadNormalMode, loadChunkMode, search, loaded, pathsToLoad;\n\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            isClient = _ref.isClient, router = _ref.router;\n            flexsearch = options.flexsearch, _options$chunk = options.chunk, chunk = _options$chunk === void 0 ? false : _options$chunk, _options$compress = options.compress, compress = _options$compress === void 0 ? false : _options$compress, _options$autoFetch = options.autoFetch, autoFetch = _options$autoFetch === void 0 ? true : _options$autoFetch, _options$autoSetup = options.autoSetup, autoSetup = _options$autoSetup === void 0 ? true : _options$autoSetup, searchFields = options.searchFields, pathPrefix = options.pathPrefix, siteUrl = options.siteUrl;\n\n            if (!isClient) {\n              _context3.next = 25;\n              break;\n            }\n\n            basePath = pathPrefix && (process.env.NODE_ENV !== 'development' || location.origin === siteUrl) ? \"\".concat(pathPrefix, \"/flexsearch\") : '/flexsearch'; // Data fetch functions\n\n            loadNormalMode = /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(search) {\n                var searchIndex;\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return fetch(\"\".concat(basePath, \".json\")).then(function (r) {\n                          return r.json();\n                        });\n\n                      case 2:\n                        searchIndex = _context.sent;\n                        if (compress) searchIndex = cjson.decompress(searchIndex);\n                        search[\"import\"](searchIndex, {\n                          serialize: false\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function loadNormalMode(_x4) {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n\n            loadChunkMode = /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(search) {\n                var _yield$fetch$then, index, docs, fetchData, searchIndex, searchDocs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, id, data;\n\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return fetch(\"\".concat(basePath, \"/manifest.json\")).then(function (r) {\n                          return r.json();\n                        });\n\n                      case 2:\n                        _yield$fetch$then = _context2.sent;\n                        index = _yield$fetch$then.index;\n                        docs = _yield$fetch$then.docs;\n\n                        fetchData = function fetchData(id) {\n                          return fetch(\"\".concat(basePath, \"/\").concat(id, \".json\")).then(function (r) {\n                            return r.json();\n                          }).then(function (j) {\n                            return compress ? cjson.decompress(j) : j;\n                          });\n                        };\n\n                        _context2.next = 8;\n                        return pMap(index, function (id) {\n                          return fetchData();\n                        });\n\n                      case 8:\n                        searchIndex = _context2.sent;\n                        search[\"import\"](searchIndex, {\n                          index: true,\n                          doc: false,\n                          serialize: false\n                        });\n                        searchDocs = {};\n                        _iteratorNormalCompletion = true;\n                        _didIteratorError = false;\n                        _context2.prev = 13;\n                        _iterator = _asyncIterator(docs);\n\n                      case 15:\n                        _context2.next = 17;\n                        return _iterator.next();\n\n                      case 17:\n                        _step = _context2.sent;\n                        _iteratorNormalCompletion = _step.done;\n                        _context2.next = 21;\n                        return _step.value;\n\n                      case 21:\n                        _value = _context2.sent;\n\n                        if (_iteratorNormalCompletion) {\n                          _context2.next = 31;\n                          break;\n                        }\n\n                        id = _value;\n                        _context2.next = 26;\n                        return fetchData(id);\n\n                      case 26:\n                        data = _context2.sent;\n                        searchDocs = _objectSpread(_objectSpread({}, searchDocs), Object.fromEntries(data));\n\n                      case 28:\n                        _iteratorNormalCompletion = true;\n                        _context2.next = 15;\n                        break;\n\n                      case 31:\n                        _context2.next = 37;\n                        break;\n\n                      case 33:\n                        _context2.prev = 33;\n                        _context2.t0 = _context2[\"catch\"](13);\n                        _didIteratorError = true;\n                        _iteratorError = _context2.t0;\n\n                      case 37:\n                        _context2.prev = 37;\n                        _context2.prev = 38;\n\n                        if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n                          _context2.next = 42;\n                          break;\n                        }\n\n                        _context2.next = 42;\n                        return _iterator[\"return\"]();\n\n                      case 42:\n                        _context2.prev = 42;\n\n                        if (!_didIteratorError) {\n                          _context2.next = 45;\n                          break;\n                        }\n\n                        throw _iteratorError;\n\n                      case 45:\n                        return _context2.finish(42);\n\n                      case 46:\n                        return _context2.finish(37);\n\n                      case 47:\n                        search[\"import\"]([searchDocs], {\n                          index: false,\n                          doc: true,\n                          serialize: false\n                        });\n\n                      case 48:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, null, [[13, 33, 37, 47], [38,, 42, 46]]);\n              }));\n\n              return function loadChunkMode(_x5) {\n                return _ref4.apply(this, arguments);\n              };\n            }(); // Manually setup the Flexsearch instance\n\n\n            if (autoSetup) {\n              _context3.next = 9;\n              break;\n            }\n\n            Vue.prototype.$flexsearch = {\n              flexsearch: _objectSpread(_objectSpread({}, flexsearch), {}, {\n                doc: {\n                  id: 'id',\n                  field: searchFields\n                }\n              }),\n              basePath: basePath,\n              loadIndex: loadNormalMode\n            };\n            return _context3.abrupt(\"return\");\n\n          case 9:\n            // Setup global Flexsearch Instance\n            search = new FlexSearch(_objectSpread(_objectSpread({}, flexsearch), {}, {\n              doc: {\n                id: 'id',\n                field: searchFields\n              }\n            }));\n            Vue.prototype.$search = search;\n            Vue.prototype.$searchOptions = {\n              basePath: basePath\n            };\n\n            if (autoFetch) {\n              _context3.next = 14;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 14:\n            if (!(typeof autoFetch === 'string' || _typeof(autoFetch) === 'object')) {\n              _context3.next = 20;\n              break;\n            }\n\n            loaded = false;\n            pathsToLoad = typeof autoFetch === 'string' ? [autoFetch] : autoFetch;\n            return _context3.abrupt(\"return\", router.afterEach(function (_ref5) {\n              var currentPath = _ref5.path;\n\n              if (pathsToLoad.includes(currentPath) && !loaded) {\n                loaded = true;\n                return chunk ? loadChunkMode(search) : loadNormalMode(search);\n              }\n            }));\n\n          case 20:\n            if (!chunk) {\n              _context3.next = 24;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", loadChunkMode(search));\n\n          case 24:\n            return _context3.abrupt(\"return\", loadNormalMode(search));\n\n          case 25:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _ref2.apply(this, arguments);\n}",null]}