{"remainingRequest":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/osbendc/Desktop/Github/vinushut-vue/src/pages/Cart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/src/pages/Cart.vue","mtime":1617802825924},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/cache-loader/dist/cjs.js","mtime":1617803144827},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/babel-loader/lib/index.js","mtime":1617803144756},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/cache-loader/dist/cjs.js","mtime":1617803144827},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/vue-loader/lib/index.js","mtime":1617803146183}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport currency from 'currency.js'\nimport gql from 'graphql-tag'\nexport default {\n  metaInfo: {\n    title: 'Your Cart'\n  },\n  data: () => ({ email: '', isLoading: false }),\n  computed: {\n    cart () { return this.$store.state.cart },\n    cartTotal () {\n      const total = this.cart.reduce((total, item) => total.add(currency(item.price.amount).multiply(item.qty)), currency(0, { formatWithSymbol: true, symbol: '$' }))\n      return total.format()\n    }\n  },\n  methods: {\n    totalPrice ({ qty, price }) {\n      return currency(price.amount, { formatWithSymbol: true, symbol: '$' }).multiply(qty).format()\n    },\n    async removeItem (itemId) {\n      await this.$store.commit('removeFromCart', itemId)\n      this.$notify({\n        title: 'Item removed from cart',\n        type: 'primary'\n      })\n    },\n    async checkout () {\n      const email = this.email\n      if (!this.cart.length) return alert('No items in cart')\n      const lineItems = this.cart.map(item => ({ quantity: item.qty, variantId: item.variantId }))\n\n      const checkoutInput = { email, lineItems }\n\n      try {\n        this.isLoading = true\n        const { data: { checkoutCreate } } = await this.$apollo.mutate({\n          mutation: gql`mutation checkoutCreate($input: CheckoutCreateInput!) {\n            checkoutCreate(input: $input) {\n              checkout {\n                id\n                webUrl\n              }\n              checkoutUserErrors {\n                code\n                field\n                message\n              }\n            }\n          }\n          `,\n          variables: { input: checkoutInput }\n        })\n        if (checkoutCreate.checkoutUserErrors.length) throw new Error(checkoutCreate.checkoutUserErrors[ 0 ].message)\n\n        window.location = checkoutCreate.checkout.webUrl\n      } catch (error) {\n        this.isLoading = false\n        console.error(error)\n        this.$notify({\n          title: error,\n          type: 'danger',\n          message: 'Something went wrong - please try again.'\n        })\n      }\n    }\n  }\n}\n",null]}