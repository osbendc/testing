{"remainingRequest":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/osbendc/Desktop/Github/vinushut-vue/src/templates/Product.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/src/templates/Product.vue","mtime":1617802825925},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/cache-loader/dist/cjs.js","mtime":1617803144827},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/babel-loader/lib/index.js","mtime":1617803144756},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/cache-loader/dist/cjs.js","mtime":1617803144827},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/vue-loader/lib/index.js","mtime":1617803146183}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  metaInfo () {\n    return {\n      title: this.$page.shopifyProduct.title\n    }\n  },\n  data: () => ({\n    selectedOptions: {},\n    quantity: 1\n  }),\n  computed: {\n    product () { return this.$page.shopifyProduct },\n    productOptions () { return this.product.options.filter(({ name }) => name !== 'Title') },\n    currentVariant () {\n      const matchedVariant = this.product.variants.find(variant =>\n        variant.selectedOptions.every(({ name, value }) => value === this.selectedOptions[ name ])\n      )\n      return matchedVariant\n    }\n  },\n  watch: {\n    $route (to, from) {\n      const [firstVariant] = this.product.variants\n      this.selectedOptions = firstVariant.selectedOptions.reduce((options, { name, value }) => ({ [ name ]: value, ...options }), {})\n    }\n  },\n  mounted () {\n    const [firstVariant] = this.product.variants\n    this.selectedOptions = firstVariant.selectedOptions.reduce((options, { name, value }) => ({ [ name ]: value, ...options }), {})\n  },\n  methods: {\n    async addToCart () {\n      const variant = this.currentVariant\n      const payload = {\n        qty: this.quantity,\n        productTitle: this.product.title,\n        variantTitle: variant.title,\n        variantId: variant.id,\n        price: variant.price,\n        image: variant.image\n      }\n      await this.$store.commit('addToCart', payload)\n      this.$notify({\n        title: `Added ${payload.productTitle} to Cart`,\n        type: 'primary'\n      })\n    }\n  }\n}\n",{"version":3,"sources":["Product.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Product.vue","sourceRoot":"src/templates","sourcesContent":["<template>\n  <Layout>\n    <div class=\"container-inner mx-auto my-16\">\n      <h1 class=\"text-4xl font-bold leading-tight\">{{ product.title }}</h1>\n      <div class=\"text-xl text-gray-600 mb-4\"></div>\n      <div v-if=\"currentVariant\" class=\"flex mb-8 text-sm\">\n        <g-link\n          class=\"bg-gray-300 rounded-full px-4 py-2 mr-4 hover:bg-green-300\">\n          {{ currentVariant.price.amount }}\n        </g-link>\n      </div>\n      \n      <div class=\"mb-8\">\n        <g-image\n              :src=\"product.images[0].src\"\n              :alt=\"product.images[0].altText || product.title\" />\n      </div>\n\n      <div class=\"mb-8\" v-html=\"product.descriptionHtml\" />\n\n      <div\n        v-for=\"option in productOptions\"\n        :key=\"option.id\"\n        class=\"flex mx-auto\">\n        <div class=\"\">\n          <label\n            :for=\"option.name\"\n            class=\"\">\n            {{ option.name }}\n            <div class=\"\">\n              <select\n                :id=\"option.name\"\n                v-model=\"selectedOptions[option.name]\">\n                <option\n                  v-for=\"value in option.values\"\n                  :key=\"value\"\n                  :value=\"value\">\n                  {{ value }}\n                </option>\n              </select>\n            </div>\n          </label>\n        </div>\n      </div>\n      <br>\n\n      <notifications />\n\n      <div class=\"flex mx-auto\">\n        <div class=\"w-1/2\">\n          <input\n            id=\"quantity\"\n            v-model.number=\"quantity\"\n            class=\"bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 block w-full appearance-none leading-normal\"\n            type=\"number\">\n        </div>\n        <div class=\"w-1/2\">\n          <button @click=\"addToCart\"\n            @keyup.enter=\"addToCart\" \n            class=\"bg-black hover:bg-gray-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\">\n            Add To Cart\n          </button>\n        </div>\n      </div>\n      <br>\n\n    </div>\n  </Layout>\n</template>\n\n<script>\nexport default {\n  metaInfo () {\n    return {\n      title: this.$page.shopifyProduct.title\n    }\n  },\n  data: () => ({\n    selectedOptions: {},\n    quantity: 1\n  }),\n  computed: {\n    product () { return this.$page.shopifyProduct },\n    productOptions () { return this.product.options.filter(({ name }) => name !== 'Title') },\n    currentVariant () {\n      const matchedVariant = this.product.variants.find(variant =>\n        variant.selectedOptions.every(({ name, value }) => value === this.selectedOptions[ name ])\n      )\n      return matchedVariant\n    }\n  },\n  watch: {\n    $route (to, from) {\n      const [firstVariant] = this.product.variants\n      this.selectedOptions = firstVariant.selectedOptions.reduce((options, { name, value }) => ({ [ name ]: value, ...options }), {})\n    }\n  },\n  mounted () {\n    const [firstVariant] = this.product.variants\n    this.selectedOptions = firstVariant.selectedOptions.reduce((options, { name, value }) => ({ [ name ]: value, ...options }), {})\n  },\n  methods: {\n    async addToCart () {\n      const variant = this.currentVariant\n      const payload = {\n        qty: this.quantity,\n        productTitle: this.product.title,\n        variantTitle: variant.title,\n        variantId: variant.id,\n        price: variant.price,\n        image: variant.image\n      }\n      await this.$store.commit('addToCart', payload)\n      this.$notify({\n        title: `Added ${payload.productTitle} to Cart`,\n        type: 'primary'\n      })\n    }\n  }\n}\n</script>\n\n<page-query>\nquery Product ($id: ID!) {\n  shopifyProduct (id: $id) {\n    id\n    descriptionHtml\n    title\n    tags\n    images(limit: 4) {\n      id\n      altText\n      src: transformedSrc(maxWidth: 600, maxHeight: 400, crop: CENTER)\n      thumbnail: transformedSrc(maxWidth: 150, maxHeight: 150, crop: CENTER)\n    }\n    options {\n      id\n      name\n      values\n    }\n    variants {\n      id\n      title\n      price {\n        amount(format: true)\n      }\n      selectedOptions {\n        name\n        value\n      }\n      image {\n        id\n        altText\n        thumbnail: transformedSrc(maxWidth: 150, maxHeight: 150, crop: CENTER)\n      }\n    }\n  }\n}\n</page-query>\n"]}]}