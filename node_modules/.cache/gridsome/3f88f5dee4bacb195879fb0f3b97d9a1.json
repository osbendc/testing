{"remainingRequest":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/osbendc/Desktop/Github/vinushut-vue/src/pages/Cart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/src/pages/Cart.vue","mtime":1617802825924},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/cache-loader/dist/cjs.js","mtime":1617803144827},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/babel-loader/lib/index.js","mtime":1617803144756},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/cache-loader/dist/cjs.js","mtime":1617803144827},{"path":"/Users/osbendc/Desktop/Github/vinushut-vue/node_modules/vue-loader/lib/index.js","mtime":1617803146183}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport currency from 'currency.js'\nimport gql from 'graphql-tag'\nexport default {\n  metaInfo: {\n    title: 'Your Cart'\n  },\n  data: () => ({ email: '', isLoading: false }),\n  computed: {\n    cart () { return this.$store.state.cart },\n    cartTotal () {\n      const total = this.cart.reduce((total, item) => total.add(currency(item.price.amount).multiply(item.qty)), currency(0, { formatWithSymbol: true, symbol: '$' }))\n      return total.format()\n    }\n  },\n  methods: {\n    totalPrice ({ qty, price }) {\n      return currency(price.amount, { formatWithSymbol: true, symbol: '$' }).multiply(qty).format()\n    },\n    async removeItem (itemId) {\n      await this.$store.commit('removeFromCart', itemId)\n      this.$notify({\n        title: 'Item removed from cart',\n        type: 'primary'\n      })\n    },\n    async checkout () {\n      const email = this.email\n      if (!this.cart.length) return alert('No items in cart')\n      const lineItems = this.cart.map(item => ({ quantity: item.qty, variantId: item.variantId }))\n\n      const checkoutInput = { email, lineItems }\n\n      try {\n        this.isLoading = true\n        const { data: { checkoutCreate } } = await this.$apollo.mutate({\n          mutation: gql`mutation checkoutCreate($input: CheckoutCreateInput!) {\n            checkoutCreate(input: $input) {\n              checkout {\n                id\n                webUrl\n              }\n              checkoutUserErrors {\n                code\n                field\n                message\n              }\n            }\n          }\n          `,\n          variables: { input: checkoutInput }\n        })\n        if (checkoutCreate.checkoutUserErrors.length) throw new Error(checkoutCreate.checkoutUserErrors[ 0 ].message)\n\n        window.location = checkoutCreate.checkout.webUrl\n      } catch (error) {\n        this.isLoading = false\n        console.error(error)\n        this.$notify({\n          title: error,\n          type: 'danger',\n          message: 'Something went wrong - please try again.'\n        })\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Cart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Cart.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <Layout>\n    <div class=\"container-inner mx-auto my-16\">\n\n      <table class=\"w-full table-auto\">\n        <thead>\n          <tr>\n            <th />\n            <th class=\"px-4 py-2\">Product</th>\n            <th class=\"px-4 py-2\">Quantity</th>\n            <th class=\"px-4 py-2\">Total</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          <tr\n            v-for=\"item in cart\"\n            :key=\"item.variantId\">\n            <td>\n              <g-image\n                :src=\"item.image.thumbnail\"\n                :alt=\"item.image.altText || item.title\" />\n            </td>\n            <td>\n              {{ item.productTitle }}\n              {{ item.variantTitle !== 'Default Title' ? `- ${item.variantTitle}` : '' }}\n            </td>\n            <td>{{ item.qty }}</td>\n            <td>{{ totalPrice(item) }}</td>\n            <td>\n              <button\n                class=\"\"\n                @click=\"removeItem(item.variantId)\"\n                @keyup=\"removeItem(item.variantId)\">\n                <small>Remove</small>\n              </button>\n            </td>\n          </tr>\n        </tbody>\n        <tfoot v-if=\"cart.length\">\n          <tr>\n            <th />\n            <th />\n            <th />\n            <th />\n            <th class=\"has-text-right\">\n              <p>Cart Total: {{ cartTotal }}</p>\n            </th>\n          </tr>\n        </tfoot>\n      </table>\n      <br>\n\n      <form v-if=\"cart.length\" @submit.prevent=\"checkout\">\n        <div class=\"flex mx-auto\">\n          <div class=\"w-1/2\">\n            <input\n              id=\"email\"\n              v-model=\"email\"\n              class=\"bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 block w-full appearance-none leading-normal\"\n              type=\"email\"\n              placeholder=\"Your email address\"\n              required>\n          </div>\n          <div class=\"w-1/2\">\n            <button type=\"submit\"\n              :class=\"{'is-loading': isLoading}\"\n              class=\"bg-black hover:bg-gray-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\">\n              Checkout\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div\n        v-else\n        class=\"txt-xl\">\n        <p>To checkout, add some items to cart.</p>\n        <br>\n        <g-link\n          to=\"/\"\n          class=\"button is-primary is-outlined\">\n          Browse\n        </g-link>\n      </div>\n\n    </div>\n  </Layout>\n</template>\n\n<script>\nimport currency from 'currency.js'\nimport gql from 'graphql-tag'\nexport default {\n  metaInfo: {\n    title: 'Your Cart'\n  },\n  data: () => ({ email: '', isLoading: false }),\n  computed: {\n    cart () { return this.$store.state.cart },\n    cartTotal () {\n      const total = this.cart.reduce((total, item) => total.add(currency(item.price.amount).multiply(item.qty)), currency(0, { formatWithSymbol: true, symbol: '$' }))\n      return total.format()\n    }\n  },\n  methods: {\n    totalPrice ({ qty, price }) {\n      return currency(price.amount, { formatWithSymbol: true, symbol: '$' }).multiply(qty).format()\n    },\n    async removeItem (itemId) {\n      await this.$store.commit('removeFromCart', itemId)\n      this.$notify({\n        title: 'Item removed from cart',\n        type: 'primary'\n      })\n    },\n    async checkout () {\n      const email = this.email\n      if (!this.cart.length) return alert('No items in cart')\n      const lineItems = this.cart.map(item => ({ quantity: item.qty, variantId: item.variantId }))\n\n      const checkoutInput = { email, lineItems }\n\n      try {\n        this.isLoading = true\n        const { data: { checkoutCreate } } = await this.$apollo.mutate({\n          mutation: gql`mutation checkoutCreate($input: CheckoutCreateInput!) {\n            checkoutCreate(input: $input) {\n              checkout {\n                id\n                webUrl\n              }\n              checkoutUserErrors {\n                code\n                field\n                message\n              }\n            }\n          }\n          `,\n          variables: { input: checkoutInput }\n        })\n        if (checkoutCreate.checkoutUserErrors.length) throw new Error(checkoutCreate.checkoutUserErrors[ 0 ].message)\n\n        window.location = checkoutCreate.checkout.webUrl\n      } catch (error) {\n        this.isLoading = false\n        console.error(error)\n        this.$notify({\n          title: error,\n          type: 'danger',\n          message: 'Something went wrong - please try again.'\n        })\n      }\n    }\n  }\n}\n</script>"]}]}